name: CI/CD

on:
  push:
    branches:
      - "main"

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # SonarQube Scan
      - name: SonarQube Scan
        id: sonarqube
        uses: sonarsource/sonarqube-scan-action@master
        with:
          args: |
            -Dsonar.projectKey=test
            -Dsonar.projectName=test
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

      # Check SonarQube Quality Gate Status and set result variable
      - name: Check SonarQube Quality Gate
        id: quality-gate
        run: |
          result=$(curl -s -u ${{ secrets.SONAR_TOKEN }}: ${{ secrets.SONAR_HOST_URL }}/api/qualitygates/project_status?projectKey=test)
          echo "SonarQube quality gate result: $result"
          if echo "$result" | grep -q '"status":"ERROR"'; then
            echo "::set-output name=result::failure"
            echo "SonarQube Scan Failed" > sonarqube-failure-report.txt
          else
            echo "::set-output name=result::success"
          fi

      # Send SonarQube Scan Failure Message to Slack
      - name: Send SonarQube Scan Failure Message to Slack
        if: steps.quality-gate.outputs.result == 'failure'
        run: |
          payload=$(jq -n --arg text "SonarQube Scan Failed" '{text: $text}')
          echo "Payload to be sent to Slack:"
          echo "$payload"
          curl -X POST -H 'Content-type: application/json' --data "$payload" ${{ secrets.SLACK_WEBHOOK_URL }}

      # Skip Remaining Steps if Scan Failed
      - name: Skip Remaining Steps if Scan Failed
        if: steps.quality-gate.outputs.result == 'failure'
        run: |
          echo "Skipping remaining steps because SonarQube scan failed."
          exit 0

      # Build and Push Docker Image (only if SonarQube scan is successful)
      - name: Build and Push Docker Image
        if: steps.quality-gate.outputs.result == 'success'
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: chinnadurai123/steamlit_game:game-${{ github.run_number }}

      # Install and Scan with Trivy
      - name: Install Trivy
        if: steps.quality-gate.outputs.result == 'success'
        run: |
          sudo apt-get update
          sudo apt-get install -y wget apt-transport-https gnupg lsb-release
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main | sudo tee -a /etc/apt/sources.list.d/trivy.list
          sudo apt-get update
          sudo apt-get install -y trivy

      - name: Scan the Docker image and store the output
        if: steps.quality-gate.outputs.result == 'success'
        id: trivy-scan
        run: |
          trivy image --severity LOW,MEDIUM,HIGH,CRITICAL chinnadurai123/steamlit_game:game-${{ github.run_number }} > trivy-report.txt

      # Send Trivy Report to Slack
      - name: Send Trivy Report to Slack
        if: steps.quality-gate.outputs.result == 'success'
        run: |
          scan_output=$(cat trivy-report.txt)
          payload=$(jq -n --arg text "$scan_output" '{text: $text, username: "Github-actions:CI/CD"}')
          echo "Payload to be sent to Slack:"
          echo "$payload"
          curl -X POST -H 'Content-type: application/json' --data "$payload" ${{ secrets.SLACK_WEBHOOK_URL }}

      # Notify Docker Hub Delivery Status to Slack
      - name: Send Docker Hub Delivery Status to Slack
        if: steps.quality-gate.outputs.result == 'success'
        run: |
          deployment_msg="{\"text\": \"Image chinnadurai123/steamlit_game:game-${{ github.run_number }} is pushed to DockerHubüëçÔ∏è.\", \"username\": \"CI/CD bot\"}"
          curl -X POST -H 'Content-type: application/json' --data "$deployment_msg" ${{ secrets.SLACK_WEBHOOK_URL }}
