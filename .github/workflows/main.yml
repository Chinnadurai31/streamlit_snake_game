name: ci/cd

on:
  push:
    branches:
      - "main"

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

#=================================================Sonarqube scanning========================================
      - name: SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@master
        with:
          args: |
            -Dsonar.projectKey=test
            -Dsonar.projectName=test
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

#===========================================Send Sonarqube scan report to SLACK channel==========================
      - name: Send SonarQube Results to Slack
        run: |
          # Fetch issues from SonarQube
          result=$(curl -u ${{ secrets.SONAR_TOKEN }}: ${{ secrets.SONAR_HOST_URL }}/api/issues/search?projectKeys=test)
          
          # Format the result (example: extract summary)
          summary=$(echo "$result" | jq '.total')

          # Send the summary to Slack
          curl -X POST -H 'Content-type: application/json' --data "{\"text\":\"SonarQube Scan Results:\nTotal Issues: $summary\"}" ${{ secrets.SLACK_WEBHOOK_URL }}

#========================================Build,push Docker image==========================================================
      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: |
            /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: chinnadurai123/steamlit_game:game-${{ github.run_number }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache

#================================================Scan the Docker image with Trivy=========================================
      - name: Cache Trivy database
        uses: actions/cache@v3
        with:
          path: ~/.cache/trivy
          key: trivy-db-${{ runner.os }}-${{ github.sha }}
          restore-keys: |
            trivy-db-${{ runner.os }}-

      - name: Install Trivy
        run: |
          sudo apt-get update
          sudo apt-get install -y wget apt-transport-https gnupg lsb-release
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main | sudo tee -a /etc/apt/sources.list.d/trivy.list
          sudo apt-get update
          sudo apt-get install -y trivy

      - name: Scan the image and store the output 
        id: trivy-scan
        run: |
          trivy image --severity LOW,MEDIUM,HIGH,CRITICAL chinnadurai123/steamlit_game:game-${{ github.run_number }} > trivy-report.txt

      - name: Send Trivy report to Slack
        run: |
          scan_output=$(cat trivy-report.txt)
          payload=$(jq -n --arg text "$scan_output" '{text: $text, username: " Github-actions:CI/CD "}')
          curl -X POST -H 'Content-type: application/json' --data "$payload" ${{ secrets.SLACK_WEBHOOK_URL }}

        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Send Docker Hub delivery status to Slack
        run: |
          repository_name=$(echo "${{ github.repository }}" | cut -d '/' -f 2)
          image_tag=$(echo "${GITHUB_SHA::8}")
          deployment_msg="{\"text\": \"Image chinnadurai123/steamlit_game:game-${{ github.run_number }} is pushed to DockerHubüëçÔ∏è.\", \"username\": \"CI/CD bot\"}"
          curl -X POST -H 'Content-type: application/json' --data "$deployment_msg" ${{ secrets.SLACK_WEBHOOK_URL }}
